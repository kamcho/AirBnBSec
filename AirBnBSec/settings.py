"""
Django settings for AirBnBSec project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
env_path = BASE_DIR / '.env'
if env_path.exists():
    print(f"Loading environment variables from: {env_path}")
    load_dotenv(dotenv_path=env_path, override=True)
else:
    print(f"Warning: .env file not found at {env_path}")

# Debug: Print env vars for verification
print("\n=== Environment Variables ===")
print(f"GAVACONNECT_API_KEY: {'*' * 10}{os.getenv('GAVACONNECT_API_KEY', 'Not found')[-4:] if os.getenv('GAVACONNECT_API_KEY') else 'Not found'}")
print(f"GAVACONNECT_API_SECRET: {'*' * 10}{os.getenv('GAVACONNECT_API_SECRET', 'Not found')[-4:] if os.getenv('GAVACONNECT_API_SECRET') else 'Not found'}")
print("==========================\n")

# Email Configuration
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'webmaster@localhost')
SITE_NAME = os.getenv('SITE_NAME', 'AirBnBSec')

# Password Reset Settings
PASSWORD_RESET_TIMEOUT = 60 * 60 * 24  # 1 day in seconds

# GavaConnect API Settings
GAVACONNECT_API_KEY = os.getenv('GAVACONNECT_API_KEY')
GAVACONNECT_API_SECRET = os.getenv('GAVACONNECT_API_SECRET')

if not GAVACONNECT_API_KEY or not GAVACONNECT_API_SECRET:
    print("WARNING: GavaConnect API credentials not found in environment variables")

# M-Pesa Configuration
MPESA_ENVIRONMENT = os.getenv('MPESA_ENVIRONMENT', 'sandbox')  # 'sandbox' or 'production'

# M-Pesa API Credentials - These should be in your .env file
MPESA_CONSUMER_KEY = os.getenv('MPESA_CONSUMER_KEY', 'YOUR_CONSUMER_KEY')
MPESA_CONSUMER_SECRET = os.getenv('MPESA_CONSUMER_SECRET', 'YOUR_CONSUMER_SECRET')

# M-Pesa API Endpoints - Sandbox
if MPESA_ENVIRONMENT == 'production':
    MPESA_AUTH_URL = 'https://api.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials'
    MPESA_STK_PUSH_URL = 'https://api.safaricom.co.ke/mpesa/stkpush/v1/processrequest'
    MPESA_QUERY_URL = 'https://api.safaricom.co.ke/mpesa/stkpushquery/v1/query'
else:
    MPESA_AUTH_URL = 'https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials'
    MPESA_STK_PUSH_URL = 'https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest'
    MPESA_QUERY_URL = 'https://sandbox.safaricom.co.ke/mpesa/stkpushquery/v1/query'

# M-Pesa Business Shortcode and Passkey
MPESA_PAYBILL = os.getenv('MPESA_PAYBILL', 'YOUR_PAYBILL_NUMBER')
MPESA_PASSKEY = os.getenv('MPESA_PASSKEY', 'YOUR_PASSKEY')

# Callback URL - Update this with your actual callback URL
MPESA_CALLBACK_URL = os.getenv('MPESA_CALLBACK_URL', 'https://yourdomain.com/api/payments/mpesa-callback/')

# Transaction Type (CustomerPayBillOnline or CustomerBuyGoodsOnline)
MPESA_TRANSACTION_TYPE = 'CustomerPayBillOnline'

# Account Reference (used for M-Pesa PayBill)
MPESA_ACCOUNT_REFERENCE = 'AirBnBSec'

# Transaction Description
MPESA_TRANSACTION_DESC = 'Payment for services'

# M-Pesa API Timeout (in seconds)
MPESA_API_TIMEOUT = 30


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rv1#gugg$03ffallw!^$=+-#qlro+k(ak(k0q)8ubn(iq*9126'

# SECURITY WARNING: don't run with debug turned on in production!
# Read from environment variables with defaults
DEBUG = os.getenv('DEBUG', 'True') == 'True'

# Security settings
CSRF_TRUSTED_ORIGINS = [
    'http://www.tourske.com',
    'https://tourske.com',
]

# Security settings - different in development vs production
    # HTTPS settings
    

ALLOWED_HOSTS = ['www.tourske.com','127.0.0.1','localhost','tourske.com','13.60.251.46']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Third-party apps
    'widget_tweaks',
    
    # Local apps
    'home',
    'users.apps.UsersConfig',
    'core',  # Core app for KRA verification
    'payments',  # Payments app for M-Pesa integration
]

# Custom user model
AUTH_USER_MODEL = 'users.MyUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'AirBnBSec.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AirBnBSec.wsgi.application'
AUTH_USER_MODEL = 'users.MyUser'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration
if os.getenv('ENVIRONMENT') == 'PRODUCTION':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv('DB_NAME', 'MyBnBSecurity$default'),
            'USER': os.getenv('DB_USER', 'MyBnBSecurity'),
            'PASSWORD': os.getenv('DB_PASSWORD', ''),  # Will be set in production
            'HOST': os.getenv('DB_HOST', 'MyBnBSecurity.mysql.pythonanywhere-services.com'),
            'PORT': os.getenv('DB_PORT', '3306'),
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                'charset': 'utf8mb4',
            },
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files (user uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Create media directory if it doesn't exist
os.makedirs(MEDIA_ROOT, exist_ok=True)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# GavaConnect API Settings
GAVACONNECT_API_URL = 'https://api.gavaconnect.co.ke/v1/'
# Note: In production, store the API key in environment variables or a secure vault
GAVACONNECT_API_KEY = 'your_api_key_here'  # Replace with your actual API key

# OpenAI API Settings
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-4')  # Default to GPT-4, can be overridden

# WhatsApp API Settings
WHATSAPP_ACCESS_TOKEN = os.getenv('WHATSAPP_ACCESS_TOKEN')
WHATSAPP_PHONE_NUMBER_ID = os.getenv('WHATSAPP_PHONE_NUMBER_ID')
WHATSAPP_BUSINESS_ACCOUNT_ID = os.getenv('WHATSAPP_BUSINESS_ACCOUNT_ID')
WHATSAPP_VERIFY_TOKEN = os.getenv('WHATSAPP_VERIFY_TOKEN')
